{"version":3,"file":"preactCharts.js","sources":["../src/Axis/index.tsx","../src/Utils/pluck.ts","../src/Charts/DifferenceChart/index.tsx","../src/colors.ts","../src/Charts/GroupedBar/index.tsx","../src/Charts/Histogram/index.tsx","../src/Charts/HorizontalBar/index.tsx","../src/Charts/LineScatter/index.tsx","../src/Charts/RangeChart/index.tsx","../src/Charts/ScatterPlot/index.tsx","../src/Charts/TrendChart/index.tsx","../src/Charts/TrendChart/Flag.tsx"],"sourcesContent":["import { h, Component } from 'preact';\r\nimport { select } from 'd3-selection';\r\nimport { axisBottom, axisLeft, AxisScale } from 'd3-axis';\r\nimport { style } from 'typestyle';\r\n\r\nexport const tickLabel = style({\r\n    fontSize: '1em',\r\n    cursor: 'default',\r\n    userSelect: 'none',\r\n    $nest: {\r\n        '&>.tick>line': {\r\n            strokeWidth: '1px',\r\n            strokeOpacity: 0.5,\r\n            shapeRendering: 'crispEdges',\r\n        },\r\n        '&>path': {\r\n            strokeWidth: '2px',\r\n        },\r\n    },\r\n});\r\n\r\nexport const gridStyle = style({\r\n    $nest: {\r\n        '&>path': {\r\n            stroke: 'none',\r\n        },\r\n        '&>.tick>line': {\r\n            strokeWidth: '1px',\r\n            strokeOpacity: 0.5,\r\n        },\r\n    },\r\n});\r\ninterface AxisProps {\r\n    height?: number;\r\n    width?: number;\r\n    scale: AxisScale<any>;\r\n    axisType: string;\r\n    ticks?: number;\r\n    grid?: boolean;\r\n    rotateScaleText?: boolean;\r\n    offsetX?: number;\r\n\r\n}\r\n\r\nexport class Axis extends Component<AxisProps> {\r\n    public static defaultProps: AxisProps = {\r\n        height: null,\r\n        width: null,\r\n        scale: null,\r\n        axisType: null,\r\n        ticks: 6,\r\n        grid: false,\r\n        rotateScaleText: false,\r\n    };\r\n\r\n    private axis: SVGGElement;\r\n    private grid: SVGGElement;\r\n\r\n    public render ({height, axisType, grid, offsetX}: AxisProps) {\r\n        const translate = offsetX ? `translate(${offsetX}, 0)` : `translate(0, ${height})`;\r\n        const shouldOffset = axisType.toLowerCase() === 'x' || offsetX !== undefined;\r\n\r\n        return (\r\n            <g>\r\n                <g ref={(axis) => this.axis = axis} class={tickLabel}\r\n                    transform={shouldOffset ? translate : ''}>\r\n                </g>\r\n                {\r\n                    grid &&\r\n                    <g ref={(gridline) => this.grid = gridline} class={gridStyle}\r\n                        transform={shouldOffset ? translate : ''}>\r\n                    </g>\r\n                }\r\n            </g>\r\n        );\r\n    }\r\n\r\n    public componentDidMount = () => { this.renderAxis(); };\r\n    public componentDidUpdate = () => { this.renderAxis(); };\r\n    private renderAxis = () => {\r\n        if (this.props.axisType === 'x') {\r\n            select(this.axis).call(axisBottom(this.props.scale).ticks(this.props.ticks));\r\n            if (this.props.rotateScaleText) {\r\n                select(this.axis).selectAll('text').attr('dx', '-.8em').attr('dy', '.15em')\r\n                    .style('text-anchor', 'end').attr('transform', 'rotate(-65)');\r\n            }\r\n\r\n            if (this.props.grid) {\r\n                select(this.grid).call(axisBottom(this.props.scale)\r\n                    .ticks(this.props.ticks).tickSize(-this.props.height).tickFormat('' as null));\r\n            }\r\n        } else if (this.props.axisType === 'y') {\r\n            select(this.axis).call(axisLeft(this.props.scale).ticks(this.props.ticks));\r\n            if (this.props.grid) {\r\n                select(this.grid).call(axisLeft(this.props.scale)\r\n                    .ticks(this.props.ticks).tickSize(-this.props.width).tickFormat('' as null));\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Returns on array of key values out of an input array and a key.\r\n * Null values are removed.\r\n * @export\r\n * @template T\r\n * @template K\r\n * @param {T[]} array user defined array\r\n * @param {K} key\r\n * @returns {Array<T[K]>}\r\n */\r\nexport function pluck<T, K extends keyof T> (array: T[], key: K): Array<T[K]> {\r\n    return array.map((el) => {\r\n        if (el[key] !== null) return el[key];\r\n    });\r\n}\r\n/**\r\n * Returns on array of unique key values out of an input array and a key.\r\n * @export\r\n * @template T\r\n * @template K\r\n * @param {T[]} array\r\n * @param {K} key\r\n * @returns {Array<T[K]>}\r\n */\r\nexport function pluckUnique<T, K extends keyof T> (array: T[], key: K): Array<T[K]> {\r\n    return [...new Set(pluck(array, key))];\r\n}\r\n","import { h, Component } from 'preact';\r\nimport { Margin } from '../../types';\r\nimport { Axis } from '../../Axis';\r\nimport { scaleLinear, scaleBand, ScaleBand, ScaleLinear } from 'd3-scale';\r\nimport { max } from 'd3-array';\r\nimport { pluck } from '../../Utils/pluck';\r\n\r\ndeclare const ResizeObserver: any;\r\n\r\ninterface DiffBarProps {\r\n    name: string;\r\n    data: Array<{name: string, value: number}>;\r\n\r\n    height?: number;\r\n    width?: number;\r\n    margin?: Margin;\r\n    ticks?: number;\r\n}\r\n\r\ninterface DiffBarDefaultProps {\r\n\r\n    height: number;\r\n    width: number;\r\n    margin: Margin;\r\n    ticks: number;\r\n}\r\n\r\ninterface DiffBarState {\r\n    width: number;\r\n    innerWidth: number;\r\n    height: number;\r\n    innerHeight: number;\r\n}\r\nexport class DifferenceChart extends Component<DiffBarProps, DiffBarState> {\r\n    public static defaultProps: DiffBarDefaultProps = {\r\n        height: 800,\r\n        width: 600,\r\n        margin: {\r\n            top: 25,\r\n            right: 25,\r\n            bottom: 50,\r\n            left: 25,\r\n        },\r\n        ticks: 8,\r\n    };\r\n    private chartSVG: HTMLBaseElement;\r\n    private resizeOb: any;\r\n\r\n    constructor (props: DiffBarProps) {\r\n        super(props);\r\n        const innerWidth = props.width - props.margin.right - props.margin.left;\r\n        const innerHeight = props.height - props.margin.top - props.margin.bottom;\r\n        this.state = {\r\n            height: props.height,\r\n            innerHeight,\r\n            width: props.width,\r\n            innerWidth,\r\n        };\r\n    }\r\n    public render ({ margin, ticks, data, name }: DiffBarProps,\r\n                   { height, width, innerHeight, innerWidth }: DiffBarState) {\r\n\r\n        const absoluteXValues = data.map((d) => Math.abs(d.value));\r\n        const xMax = max(absoluteXValues);\r\n\r\n        const xDomain = [-xMax, xMax];\r\n        const yDomain = pluck(data, 'name');\r\n\r\n        const xScale = scaleLinear()\r\n            .range([0, innerWidth])\r\n            .domain(xDomain)\r\n            .nice();\r\n\r\n        const yScale = scaleBand()\r\n            .rangeRound([innerHeight, 0])\r\n            .paddingInner(0.1)\r\n            .domain(yDomain);\r\n\r\n        return (\r\n            <svg ref={(svg) => this.chartSVG = svg} class={name} height={height} width={width}>\r\n                <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n                    {\r\n                        data &&\r\n                            this.createBars(yScale, xScale)\r\n                    }\r\n                    <Axis height={innerHeight} axisType='x' scale={xScale} rotateScaleText={false} grid={true}/>\r\n                    <Axis width={innerWidth} axisType='y' scale={yScale} ticks={ticks} offsetX={xScale(0)}/>\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n    public componentDidMount () {\r\n        this.resizeChart();\r\n        this.resizeOb = new ResizeObserver((entries: any[]) => {\r\n            for (const entry of entries) {\r\n                const cr = entry.contentRect;\r\n                const width = cr.width;\r\n                const height = cr.height;\r\n                if (width !== this.state.width || height !== this.state.height) {\r\n                    this.resizeChart();\r\n                }\r\n            }\r\n        });\r\n        this.resizeOb.observe(this.chartSVG.parentElement);\r\n    }\r\n\r\n    public componentWillUnmount () {\r\n        this.resizeOb.disconnect();\r\n    }\r\n\r\n    private resizeChart () {\r\n        const parent = this.chartSVG.parentElement;\r\n        const cr = parent.getBoundingClientRect();\r\n        const width = cr.width;\r\n        const height = cr.height;\r\n        const innerWidth = width - this.props.margin.left - this.props.margin.right;\r\n        const innerHeight = height - this.props.margin.top - this.props.margin.bottom;\r\n        this.setState({innerWidth, innerHeight, height, width});\r\n    }\r\n\r\n    private createBars = (y: ScaleBand<string>, x: ScaleLinear<number, number>) => {\r\n        return this.props.data.map((entry) =>\r\n            <rect height={y.bandwidth()} x={x(Math.min(0, entry.value))} y={y(entry.name as string)}\r\n                width={Math.abs(x(entry.value) - x(0))} fill={entry.value < 0 ? 'darkred' : 'green'}\r\n                title={entry.value.toFixed(4)}>\r\n            </rect>);\r\n    }\r\n}\r\n","export const colourArray = [\r\n    '#4f8cff', '#d3fe14', '#fe1c3a', '#fdd8eb', '#01a571', '#e609fd', '#c48c0d', '#70fffe', '#968791', '#b7ce9d',\r\n    '#c7a2fe', '#fb7fb4', '#26d10a', '#24b6cb', '#feaa83', '#bed8fc', '#47ffa4', '#c76f5e', '#fec82c', '#799922',\r\n    '#fe7314', '#8aa9a0', '#f219a8', '#ae74bc', '#8fa2ca', '#21d4b3', '#dfefe9', '#9873fd', '#959064', '#c4b2b0',\r\n    '#b1c60c', '#fd82fe', '#ffdea7', '#cafc9d', '#dca7d0', '#69c979', '#55ff07', '#c16d91', '#9cd2d1', '#70c3ff',\r\n    '#c9ad70', '#ff7874', '#fc9c0f', '#b2ffd6', '#ee4c7a', '#d7949a', '#e2cafd', '#08a90f', '#6a94a2', '#2cdefb',\r\n    '#139ad4', '#9eb35d', '#de67c5', '#c05afe', '#ae98c1', '#b3bbc8', '#21a499', '#d88b52', '#969cfe', '#77a374',\r\n    '#feb4be', '#90e466', '#f7ef6a', '#e6532c', '#ccaf23', '#e9e9fd', '#8986c4', '#b08978', '#e3d4c9', '#b2baf7',\r\n    '#cbcf67', '#baf0fe', '#48f8cf', '#ce6e0c', '#a7ac90', '#8dd9ae', '#e2f2c4', '#89b5c6', '#f7ba67', '#72b93c',\r\n    '#bac6bc', '#ffb0fe', '#858f84', '#d08edc', '#a09538', '#939aa5', '#bb8ba8', '#5ab597', '#b08148', '#69a5eb',\r\n    '#d4c2d5', '#fd0edf', '#ae85e1', '#e3bc9c', '#4ca14f', '#dadd11', '#d869ec', '#a1a90e', '#60c2bf', '#8ebc96',\r\n];\r\n","import { h, Component } from 'preact';\r\nimport { Margin, GroupedDataObject } from '../../types';\r\nimport { Axis } from '../../Axis';\r\nimport { scaleLinear, scaleBand, ScaleBand, ScaleLinear, scaleOrdinal, ScaleOrdinal } from 'd3-scale';\r\nimport { max } from 'd3-array';\r\nimport { pluckUnique } from '../../Utils/pluck';\r\nimport { colourArray } from '../../colors';\r\n\r\ndeclare const ResizeObserver: any;\r\n\r\ninterface GroupedBarProps {\r\n    name: string;\r\n    data: GroupedDataObject;\r\n    groups: string[];\r\n    legendReference: {[key: string]: string};\r\n    height?: number;\r\n    width?: number;\r\n    margin?: Margin;\r\n    ticks?: number;\r\n}\r\n\r\ninterface GroupedBarDefaultProps {\r\n    height?: number;\r\n    width?: number;\r\n    margin?: Margin;\r\n    ticks?: number;\r\n}\r\n\r\ninterface GroupedBarState {\r\n    width: number;\r\n    innerWidth: number;\r\n    height: number;\r\n    innerHeight: number;\r\n}\r\nexport class GroupedBar extends Component<GroupedBarProps, GroupedBarState> {\r\n    public static defaultProps: GroupedBarDefaultProps = {\r\n        height: 500,\r\n        width: 500,\r\n        margin: {\r\n            top: 25,\r\n            right: 25,\r\n            bottom: 75,\r\n            left: 50,\r\n        },\r\n        ticks: 6,\r\n    };\r\n    private chartSVG: HTMLBaseElement;\r\n    private resizeOb: any;\r\n\r\n    constructor (props: GroupedBarProps) {\r\n        super(props);\r\n        const innerWidth = props.width - props.margin.right - props.margin.left;\r\n        const innerHeight = props.height - props.margin.top - props.margin.bottom;\r\n        this.state = {\r\n            height: props.height,\r\n            innerHeight,\r\n            width: props.width,\r\n            innerWidth,\r\n        };\r\n    }\r\n    public render ({ margin, ticks, data, groups, legendReference, name }: GroupedBarProps,\r\n                   { height, width, innerHeight, innerWidth }: GroupedBarState) {\r\n        let yMax = 0;\r\n\r\n        for (const key of groups) {\r\n            const groupMax = max(data[key], (d) => d.value);\r\n            yMax = groupMax > yMax ? groupMax : yMax;\r\n        }\r\n\r\n        const names = pluckUnique(data[groups[0]], 'name') as string[];\r\n\r\n        const yScale = scaleLinear()\r\n            .range([innerHeight, 0])\r\n            .domain([0, yMax])\r\n            .nice();\r\n\r\n        const xScale = scaleBand()\r\n            .rangeRound([0, innerWidth])\r\n            .paddingInner(0.1)\r\n            .domain(groups);\r\n\r\n        const x1 = scaleBand()\r\n            .padding(0.05)\r\n            .domain(names)\r\n            .rangeRound([0, xScale.bandwidth()]);\r\n\r\n        const colourScale = scaleOrdinal(colourArray);\r\n        return (\r\n            <svg ref={(svg) => this.chartSVG = svg} class={name} height={height} width={width}>\r\n                <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n                    <Axis height={innerHeight} axisType='x' scale={xScale} rotateScaleText={true}/>\r\n                    <Axis width={innerWidth} axisType='y' scale={yScale} grid={true} ticks={ticks}/>\r\n                    {\r\n                        data &&\r\n                            this.createBars(xScale, x1, yScale, innerHeight, groups, colourScale)\r\n                    }\r\n                    {\r\n                        names &&\r\n                            names.map((barName, idx) =>\r\n                                <g transform={`translate(0, ${idx * 20})`}>\r\n                                    <rect x={innerWidth + margin.right - 18} width={18} height={15}\r\n                                        strokeWidth='1px' fill={colourScale(barName)}>\r\n                                    </rect>\r\n                                    <text x={innerWidth + margin.right - 24} y={9} dy='0.35em' text-anchor='end'>\r\n                                        {legendReference[barName]}\r\n                                    </text>\r\n                                </g>)\r\n                    }\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n    public componentDidMount () {\r\n        this.resizeChart();\r\n        this.resizeOb = new ResizeObserver((entries: any[]) => {\r\n            for (const entry of entries) {\r\n                const cr = entry.contentRect;\r\n                const width = cr.width;\r\n                const height = cr.height;\r\n                if (width !== this.state.width || height !== this.state.height) {\r\n                    this.resizeChart();\r\n                }\r\n            }\r\n        });\r\n        this.resizeOb.observe(this.chartSVG.parentElement);\r\n    }\r\n\r\n    public componentWillUnmount () {\r\n        this.resizeOb.disconnect();\r\n    }\r\n\r\n    private resizeChart () {\r\n        const parent = this.chartSVG.parentElement;\r\n        const cr = parent.getBoundingClientRect();\r\n        const width = cr.width;\r\n        const height = cr.height;\r\n        const innerWidth = width - this.props.margin.left - this.props.margin.right;\r\n        const innerHeight = height - this.props.margin.top - this.props.margin.bottom;\r\n        this.setState({innerWidth, innerHeight, height, width});\r\n    }\r\n\r\n    private createBars = (x0: ScaleBand<string>, x1: ScaleBand<string>, y: ScaleLinear<number, number>,\r\n                          height: number, groups: string[], colourScale: ScaleOrdinal<string, string>) => {\r\n        return groups.map((group) =>\r\n            <g transform={`translate(${x0(group)}, 0)`}>\r\n                {\r\n                    this.props.data[group].map((entry) =>\r\n                        <rect width={x1.bandwidth()} x={x1(entry.name as string)} y={y(entry.value)}\r\n                            height={height - y(entry.value)} fill={colourScale(entry.name as string)}\r\n                            title={entry.value.toFixed(4)}>\r\n                        </rect>)\r\n                }\r\n            </g>,\r\n        );\r\n    }\r\n}\r\n","import { h, Component } from 'preact';\r\nimport { Axis } from '../../Axis';\r\nimport { DataArray, Margin } from '../../types';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { min, max, histogram } from 'd3-array';\r\nimport { style } from 'typestyle';\r\n\r\nconst bar = style({\r\n    fillOpacity: 1,\r\n    strokeWidth: '1px',\r\n});\r\n\r\ndeclare const ResizeObserver: any;\r\n\r\ninterface HistogramProps {\r\n    name: string;\r\n    height?: number;\r\n    width?: number;\r\n    margin?: Margin;\r\n    x: string;\r\n    data: DataArray;\r\n    ticks?: number;\r\n    barColour?: string;\r\n    barOutline?: string;\r\n}\r\n\r\ninterface HistogramDefaultProps {\r\n    height: number;\r\n    width: number;\r\n    margin: Margin;\r\n    ticks: number;\r\n    barColour: string;\r\n    barOutline: string;\r\n}\r\n\r\ninterface HistogramState {\r\n    width: number;\r\n    innerWidth: number;\r\n    height: number;\r\n    innerHeight: number;\r\n}\r\n\r\nexport class Histogram extends Component<HistogramProps, HistogramState> {\r\n\r\n    public static defaultProps: HistogramDefaultProps = {\r\n        height: 250,\r\n        width: 350,\r\n        margin: {\r\n            top: 25,\r\n            right: 25,\r\n            bottom: 75,\r\n            left: 50,\r\n        },\r\n        ticks: 8,\r\n        barColour: 'steelblue',\r\n        barOutline: 'black',\r\n    };\r\n    private chartSVG: HTMLBaseElement;\r\n    private resizeOb: any;\r\n\r\n    constructor (props: HistogramProps) {\r\n        super(props);\r\n        const innerWidth = props.width - props.margin.left - props.margin.right;\r\n        const innerHeight = props.height - props.margin.top - props.margin.bottom;\r\n        this.state = {\r\n            width: props.width,\r\n            height: props.height,\r\n            innerWidth,\r\n            innerHeight,\r\n        };\r\n    }\r\n\r\n    public render ({name, margin, x, data, ticks, barColour, barOutline}: HistogramProps,\r\n                   {height, width, innerHeight, innerWidth}: HistogramState) {\r\n        const valuesArray = data.map((d) => d[x]);\r\n        const xMin = min(valuesArray);\r\n        const xMax = max(valuesArray) * 1.01;\r\n\r\n        const xScale = scaleLinear().rangeRound([0, innerWidth]).domain([xMin, xMax]).nice();\r\n        const bins = histogram()\r\n            .domain(xScale.domain() as [number, number])\r\n            .thresholds(xScale.ticks(ticks))(valuesArray);\r\n        const yMax = max(bins, (d) => d.length);\r\n        const yScale = scaleLinear().range([innerHeight, 0]).domain([0, yMax]);\r\n\r\n        const barWidth = xScale(bins[0].x1) - xScale(bins[0].x0);\r\n        return (\r\n            <svg ref={(svg) => this.chartSVG = svg} class={name} height={height} width={width}>\r\n                <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n                    <Axis height={innerHeight} axisType='x' scale={xScale} ticks={ticks} rotateScaleText={true}/>\r\n                    <Axis width={innerWidth} axisType='y' scale={yScale} grid={true} ticks={8}/>\r\n                    {\r\n                        barWidth &&\r\n                        bins.map((bin) =>\r\n                            <rect class={bar} x='1' width={barWidth} height={innerHeight - yScale(bin.length)}\r\n                                transform={`translate(${xScale(bin.x0)}, ${yScale(bin.length)})`}\r\n                                fill={barColour} stroke={barOutline}>\r\n                            </rect>,\r\n                        )\r\n                    }\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    public componentDidMount () {\r\n        this.resizeChart();\r\n        this.resizeOb = new ResizeObserver((entries: any[]) => {\r\n            for (const entry of entries) {\r\n                const cr = entry.contentRect;\r\n                const width = cr.width;\r\n                const height = cr.height;\r\n                if (width !== this.state.width || height !== this.state.height) {\r\n                    this.resizeChart();\r\n                }\r\n            }\r\n        });\r\n        this.resizeOb.observe(this.chartSVG.parentElement);\r\n    }\r\n\r\n    public componentWillUnmount () {\r\n        this.resizeOb.disconnect();\r\n    }\r\n\r\n    private resizeChart () {\r\n        const parent = this.chartSVG.parentElement;\r\n        const cr = parent.getBoundingClientRect();\r\n        const width = cr.width;\r\n        const height = cr.height;\r\n        const innerWidth = width - this.props.margin.left - this.props.margin.right;\r\n        const innerHeight = height - this.props.margin.top - this.props.margin.bottom;\r\n        this.setState({innerWidth, innerHeight, height, width});\r\n    }\r\n}\r\n","import { h, Component } from 'preact';\r\nimport { Margin, GroupedDataObject } from '../../types';\r\nimport { Axis } from '../../Axis';\r\nimport { scaleLinear, scaleBand, ScaleBand, ScaleLinear, scaleOrdinal, ScaleOrdinal } from 'd3-scale';\r\nimport { max } from 'd3-array';\r\nimport { pluckUnique } from '../../Utils/pluck';\r\nimport { colourArray } from '../../colors';\r\n\r\ndeclare const ResizeObserver: any;\r\n\r\ninterface HorizontalBarProps {\r\n    name: string;\r\n    data: GroupedDataObject;\r\n    groups: string[];\r\n    legendReference: {[key: string]: string};\r\n\r\n    height?: number;\r\n    width?: number;\r\n    margin?: Margin;\r\n    ticks?: number;\r\n}\r\n\r\ninterface HorizontalBarDefaultProps {\r\n    height?: number;\r\n    width?: number;\r\n    margin?: Margin;\r\n    ticks?: number;\r\n}\r\n\r\ninterface HorizontalBarState {\r\n    width: number;\r\n    innerWidth: number;\r\n    height: number;\r\n    innerHeight: number;\r\n}\r\nexport class HorizontalBar extends Component<HorizontalBarProps, HorizontalBarState> {\r\n    public static defaultProps: HorizontalBarDefaultProps = {\r\n        height: 800,\r\n        width: 600,\r\n        margin: {\r\n            top: 25,\r\n            right: 25,\r\n            bottom: 50,\r\n            left: 150,\r\n        },\r\n        ticks: 6,\r\n    };\r\n    private chartSVG: HTMLBaseElement;\r\n    private resizeOb: any;\r\n\r\n    constructor (props: HorizontalBarProps) {\r\n        super(props);\r\n        const innerWidth = props.width - props.margin.right - props.margin.left;\r\n        const innerHeight = props.height - props.margin.top - props.margin.bottom;\r\n        this.state = {\r\n            height: props.height,\r\n            innerHeight,\r\n            width: props.width,\r\n            innerWidth,\r\n        };\r\n    }\r\n    public render ({ margin, ticks, data, groups, name, legendReference }: HorizontalBarProps,\r\n                   { height, width, innerHeight, innerWidth }: HorizontalBarState) {\r\n        let xMax = 0;\r\n\r\n        for (const key of groups) {\r\n            const groupMax = max(data[key], (d) => d.value);\r\n            xMax = groupMax > xMax ? groupMax : xMax;\r\n        }\r\n\r\n        const names = pluckUnique(data[groups[0]], 'name') as string[];\r\n\r\n        const xScale = scaleLinear()\r\n            .range([0, innerWidth])\r\n            .domain([0, xMax])\r\n            .nice();\r\n\r\n        const yScale = scaleBand()\r\n            .rangeRound([innerHeight, 0])\r\n            .paddingInner(0.1)\r\n            .domain(groups);\r\n\r\n        const y1 = scaleBand()\r\n            .padding(0.05)\r\n            .domain(names)\r\n            .rangeRound([0, yScale.bandwidth()]);\r\n\r\n        const colourScale = scaleOrdinal(colourArray);\r\n        return (\r\n            <svg ref={(svg) => this.chartSVG = svg} class={name} height={height} width={width}>\r\n                <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n                    <Axis height={innerHeight} axisType='x' scale={xScale} rotateScaleText={false} grid={true}/>\r\n                    <Axis width={innerWidth} axisType='y' scale={yScale} ticks={ticks}/>\r\n                    {\r\n                        data &&\r\n                            this.createBars(yScale, y1, xScale, groups, colourScale)\r\n                    }\r\n                    {\r\n                        names &&\r\n                            names.map((barName, idx) =>\r\n                                <g transform={`translate(0, ${idx * 20})`}>\r\n                                    <rect x={innerWidth + margin.right - 18} width={18} height={15} stroke='black'\r\n                                        strokeWidth='1px' fill={colourScale(barName)}>\r\n                                    </rect>\r\n                                    <text x={innerWidth + margin.right - 24} y={9} dy='0.35em' fill='whitesmoke'\r\n                                        text-anchor='end'>\r\n                                        {legendReference[barName]}\r\n                                    </text>\r\n                                </g>)\r\n                    }\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n    public componentDidMount () {\r\n        this.resizeChart();\r\n        this.resizeOb = new ResizeObserver((entries: any[]) => {\r\n            for (const entry of entries) {\r\n                const cr = entry.contentRect;\r\n                const width = cr.width;\r\n                const height = cr.height;\r\n                if (width !== this.state.width || height !== this.state.height) {\r\n                    this.resizeChart();\r\n                }\r\n            }\r\n        });\r\n        this.resizeOb.observe(this.chartSVG.parentElement);\r\n    }\r\n\r\n    public componentWillUnmount () {\r\n        this.resizeOb.disconnect();\r\n    }\r\n\r\n    private resizeChart () {\r\n        const parent = this.chartSVG.parentElement;\r\n        const cr = parent.getBoundingClientRect();\r\n        const width = cr.width;\r\n        const height = cr.height;\r\n        const innerWidth = width - this.props.margin.left - this.props.margin.right;\r\n        const innerHeight = height - this.props.margin.top - this.props.margin.bottom;\r\n        this.setState({innerWidth, innerHeight, height, width});\r\n    }\r\n\r\n    private createBars = (y0: ScaleBand<string>, y1: ScaleBand<string>, x: ScaleLinear<number, number>,\r\n                          groups: string[], colourScale: ScaleOrdinal<string, string>) => {\r\n        return groups.map((group) =>\r\n            <g transform={`translate(0, ${y0(group)})`}>\r\n                {\r\n                    this.props.data[group].map((entry) =>\r\n                        <rect height={y1.bandwidth()} x={0} y={y1(entry.name as string)}\r\n                            width={x(entry.value)} fill={colourScale(entry.name as string)}\r\n                            title={entry.value.toFixed(4)}>\r\n                        </rect>)\r\n                }\r\n            </g>,\r\n        );\r\n    }\r\n}\r\n","import { h, Component } from 'preact';\r\nimport { Axis } from '../../Axis';\r\nimport { Margin, DataArray, NumberObject } from '../../types';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { extent } from 'd3-array';\r\nimport { select, event } from 'd3-selection';\r\nimport { brush } from 'd3-brush';\r\nimport { line, curveNatural } from 'd3-shape';\r\nimport { colourArray } from '../../colors';\r\n\r\ndeclare const ResizeObserver: any;\r\n\r\ninterface LineScatterProps {\r\n    name: string;\r\n    height?: number;\r\n    width?: number;\r\n    margin?: Margin;\r\n    x: string;\r\n    y: string;\r\n    data: DataArray[];\r\n    radius?: number;\r\n    labels?: boolean;\r\n    legendReference?: string[];\r\n}\r\n\r\ninterface LineScatterDefaultProps {\r\n    height: number;\r\n    width: number;\r\n    margin: Margin;\r\n    radius: number;\r\n    labels: boolean;\r\n}\r\n\r\ninterface LineScatterState {\r\n    width: number;\r\n    innerWidth: number;\r\n    height: number;\r\n    innerHeight: number;\r\n    xDomain: [number, number];\r\n    yDomain: [number, number];\r\n}\r\n\r\nexport class LineScatter extends Component<LineScatterProps, LineScatterState> {\r\n\r\n    public static defaultProps: LineScatterDefaultProps = {\r\n        height: 500,\r\n        width: 500,\r\n        margin: {\r\n            top: 25,\r\n            right: 25,\r\n            bottom: 75,\r\n            left: 75,\r\n        },\r\n        radius: 5,\r\n        labels: false,\r\n    };\r\n    private chartSVG: any;\r\n    private resizeOb: any;\r\n    private brush: SVGGElement;\r\n    private brushSetup: any;\r\n    private xScale: any;\r\n    private yScale: any;\r\n\r\n    constructor (props: LineScatterProps) {\r\n        super(props);\r\n        const innerWidth = props.width - props.margin.left - props.margin.right;\r\n        const innerHeight = props.height - props.margin.top - props.margin.bottom;\r\n        const flatData = props.data.flat();\r\n        const xDomain = extent(flatData, (d) => d[props.x]);\r\n        const xDomainPadded = [xDomain[0] * 0.95, xDomain[1] * 1.05] as [number, number];\r\n        const yDomain = extent(flatData, (d) => d[props.y]);\r\n        const yDomainPadded = [yDomain[0] * 0.95, yDomain[1] * 1.05] as [number, number];\r\n\r\n        this.state = {\r\n            width: props.width,\r\n            height: props.height,\r\n            innerWidth,\r\n            innerHeight,\r\n            xDomain: xDomainPadded,\r\n            yDomain: yDomainPadded,\r\n        };\r\n    }\r\n\r\n    public render (props: LineScatterProps,\r\n                   {height, width, innerHeight, innerWidth, xDomain, yDomain}: LineScatterState) {\r\n\r\n        this.xScale = scaleLinear()\r\n            .range([0, innerWidth])\r\n            .domain(xDomain);\r\n\r\n        this.yScale = scaleLinear()\r\n            .range([innerHeight, 0])\r\n            .domain(yDomain);\r\n\r\n        const lineFunc = line<NumberObject>()\r\n            .x((d) => this.xScale(d[props.x]))\r\n            .y((d) => this.yScale(d[props.y]))\r\n            .curve(curveNatural);\r\n\r\n        return (\r\n            <svg ref={(svg) => this.chartSVG = svg} class={props.name} height={height} width={width}>\r\n                <g transform={`translate(${props.margin.left}, ${props.margin.top})`}>\r\n                    <clipPath id={`${props.name}_cp`}>\r\n                        <rect width={innerWidth} height={innerHeight} />\r\n                    </clipPath>\r\n                    <Axis height={innerHeight} axisType='x' scale={this.xScale} grid={true}/>\r\n                    <Axis width={innerWidth} axisType='y' scale={this.yScale} grid={true}/>\r\n                    {\r\n                        props.data.map((dArray, groupIdx) => (\r\n                            <g>\r\n                                <path d={lineFunc(dArray)} clip-path={`url(#${props.name}_cp)`}\r\n                                    stroke-linecap='round' stroke={colourArray[groupIdx]} fill='none'\r\n                                    stroke-width='2px'/>\r\n                                {\r\n                                    dArray.map((point, index) =>\r\n                                        <circle stroke-width='1px' r={props.radius} cx={this.xScale(point[props.x])}\r\n                                            cy={this.yScale(point[props.y])} key={index} fill={colourArray[groupIdx]}\r\n                                            clip-path={`url(#${props.name}_cp)`}/>)\r\n                                }\r\n                            </g>\r\n                            ),\r\n                        )\r\n                    }\r\n                    {\r\n                        props.labels &&\r\n                            <text x={innerWidth / 2} y={innerHeight + props.margin.bottom - 15}>\r\n                                {props.x.replace(/_/g, ' ')}\r\n                            </text>\r\n                    }\r\n                    {\r\n                        props.labels &&\r\n                            <text x={-innerHeight / 2} y={-props.margin.left + 15} transform='rotate(-90)'>\r\n                                {props.y.replace(/_/g, ' ')}\r\n                            </text>\r\n                    }\r\n                    {\r\n                        props.legendReference &&\r\n                            props.legendReference.map((title, idx) =>\r\n                                <g transform={`translate(0, ${idx * 20})`}>\r\n                                    <rect x={innerWidth + props.margin.right - 18} width={18} height={15}\r\n                                        strokeWidth='1px' fill={colourArray[idx]}>\r\n                                    </rect>\r\n                                    <text x={innerWidth + props.margin.right - 24} y={9} dy='0.35em'\r\n                                        text-anchor='end'>\r\n                                        {title.replace(/_/g, ' ')}\r\n                                    </text>\r\n                                </g>)\r\n                    }\r\n                    <g ref={(brushRef) => this.brush = brushRef} key={1}></g>\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    public componentDidMount () {\r\n        this.resizeChart();\r\n        this.resizeOb = new ResizeObserver((entries: any[]) => {\r\n            for (const entry of entries) {\r\n                const cr = entry.contentRect;\r\n                const width = cr.width;\r\n                const height = cr.height;\r\n                if (width !== this.state.width || height !== this.state.height) {\r\n                    this.resizeChart();\r\n                }\r\n            }\r\n        });\r\n        this.resizeOb.observe(this.chartSVG.parentElement);\r\n    }\r\n\r\n    public componentWillReceiveProps (newProps: LineScatterProps, newState: LineScatterState) {\r\n        const flatData = newProps.data.flat();\r\n        const xDomain = extent(flatData, (d) => d[newProps.x]);\r\n        const xDomainPadded = [xDomain[0] * 0.95, xDomain[1] * 1.05] as [number, number];\r\n        const yDomain = extent(flatData, (d) => d[newProps.y]);\r\n        const yDomainPadded = [yDomain[0] * 0.95, yDomain[1] * 1.05] as [number, number];\r\n        this.setState({yDomain: yDomainPadded, xDomain: xDomainPadded});\r\n    }\r\n\r\n    public componentWillUnmount () {\r\n        this.resizeOb.disconnect();\r\n    }\r\n\r\n    private resizeChart () {\r\n        const parent = this.chartSVG.parentElement;\r\n        const cr = parent.getBoundingClientRect();\r\n        const width = cr.width;\r\n        const height = cr.height;\r\n        const innerWidth = width - this.props.margin.left - this.props.margin.right;\r\n        const innerHeight = height - this.props.margin.top - this.props.margin.bottom;\r\n        this.brushSetup = brush()\r\n        .extent([\r\n            [0, 0],\r\n            [innerWidth, innerHeight],\r\n        ])\r\n        .handleSize(10)\r\n        .on('end', () => {\r\n            const s = event.selection;\r\n            if (s === null) {\r\n                const flatData = this.props.data.flat();\r\n                const xDomain = extent(flatData, (d) => d[this.props.x]);\r\n                const xDomainPadded = [xDomain[0] * 0.95, xDomain[1] * 1.05] as [number, number];\r\n                const yDomain = extent(flatData, (d) => d[this.props.y]);\r\n                const yDomainPadded = [yDomain[0] * 0.95, yDomain[1] * 1.05] as [number, number];\r\n                this.setState({xDomain: xDomainPadded, yDomain: yDomainPadded});\r\n            } else {\r\n                const xDomain = [s[0][0], s[1][0]].map(this.xScale.invert, this.xScale) as [number, number];\r\n                const yDomain = [s[1][1], s[0][1]].map(this.yScale.invert, this.yScale) as [number, number];\r\n                select(this.brush).call(this.brushSetup.move, null);\r\n                this.setState({xDomain, yDomain});\r\n            }\r\n        });\r\n        select(this.brush).call(this.brushSetup);\r\n        this.setState({innerWidth, innerHeight, height, width});\r\n    }\r\n}\r\n","import { h, Component } from 'preact';\r\nimport { scaleLinear, scaleTime } from 'd3-scale';\r\nimport { Margin, TimestampArray, TimestampData } from '../../types';\r\nimport { Axis } from '../../Axis';\r\nimport { area } from 'd3-shape';\r\nimport { min, max } from 'd3-array';\r\nimport { select, event } from 'd3-selection';\r\nimport { brushX } from 'd3-brush';\r\nimport { style } from 'typestyle';\r\n\r\ndeclare const ResizeObserver: any;\r\n\r\ninterface RangeChartProps {\r\n    name: string;\r\n    height?: number;\r\n    width?: number;\r\n    margin?: Margin;\r\n    y: string;\r\n    data: TimestampArray;\r\n    lineColour?: string;\r\n    fillColour?: string;\r\n    onBrush?: (extent: Date[]) => void;\r\n    brushColour?: string;\r\n}\r\n\r\ninterface RangeChartDefaultProps {\r\n    height: number;\r\n    width: number;\r\n    margin?: Margin;\r\n    lineColour?: string;\r\n    fillColour?: string;\r\n    onBrush?: (extent: Date[]) => void;\r\n    brushColour: string;\r\n\r\n}\r\n\r\ninterface RangeChartState {\r\n    width: number;\r\n    innerWidth: number;\r\n    height: number;\r\n    innerHeight: number;\r\n    extent?: number[];\r\n}\r\n\r\nexport class RangeChart extends Component<RangeChartProps, RangeChartState> {\r\n\r\n    public static defaultProps: RangeChartDefaultProps = {\r\n        height: 200,\r\n        width: 1000,\r\n        margin: {\r\n            top: 25,\r\n            right: 25,\r\n            bottom: 75,\r\n            left: 75,\r\n        },\r\n        lineColour: 'steelblue',\r\n        fillColour: 'steelblue',\r\n        onBrush: () => {},\r\n        brushColour: 'darkgoldenrod',\r\n    };\r\n    private brush: SVGGElement;\r\n    private brushSetup: any;\r\n    private xScale: any;\r\n    private chartSVG: HTMLBaseElement;\r\n    private resizeOb: any;\r\n    private brushClass: any;\r\n\r\n    constructor (props: RangeChartProps) {\r\n        super(props);\r\n        this.brushClass = style({\r\n            $nest: {\r\n                '&>rect.handle': {\r\n                    fill: props.brushColour,\r\n                },\r\n            },\r\n        });\r\n        const innerWidth = props.width - props.margin.left - props.margin.right;\r\n        const innerHeight = props.height - props.margin.top - props.margin.bottom;\r\n        this.state = {\r\n            width: props.width,\r\n            height: props.height,\r\n            innerWidth,\r\n            innerHeight,\r\n        };\r\n    }\r\n\r\n    public render (props: RangeChartProps, {width, height, innerWidth, innerHeight}: RangeChartState) {\r\n        this.xScale = scaleTime()\r\n            .range([0, innerWidth])\r\n            .domain([min(props.data, (d) => d.timestamp), max(props.data, (d) => d.timestamp)]);\r\n        const yScale = scaleLinear()\r\n            .range([innerHeight, 0])\r\n            .domain([min(props.data, (d) => +d[props.y]), max(props.data, (d) => +d[props.y])]);\r\n\r\n        const areaFunc = area<TimestampData>()\r\n            .x((d) => this.xScale(d.timestamp))\r\n            .y0(innerHeight)\r\n            .y1((d) => yScale(+d[props.y]));\r\n\r\n        return (\r\n            <svg ref={(svg) => this.chartSVG = svg} class={props.name} height={height} width={width}>\r\n                <g transform={`translate(${props.margin.left}, ${props.margin.top})`}>\r\n                    <Axis height={innerHeight} axisType='x' scale={this.xScale}/>\r\n                    <Axis width={innerWidth} axisType='y' scale={yScale} grid={true} ticks={0}/>\r\n                    <path d={areaFunc(props.data)}\r\n                        stroke-linecap='round' stroke={props.lineColour} fill={props.fillColour} stroke-width='1px'/>\r\n                    <g ref={(brush) => this.brush = brush} class={this.brushClass}></g>\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    public componentDidMount = () => {\r\n        this.resizeChart();\r\n        this.resizeOb = new ResizeObserver((entries: any[]) => {\r\n            for (const entry of entries) {\r\n                const cr = entry.contentRect;\r\n                const width = cr.width;\r\n                const height = cr.height;\r\n                if (width !== this.state.width || height !== this.state.height) {\r\n                    this.resizeChart();\r\n                }\r\n            }\r\n        });\r\n        this.resizeOb.observe(this.chartSVG.parentElement);\r\n    }\r\n\r\n    public componentWillUnmount () {\r\n        this.resizeOb.disconnect();\r\n        select(this.brush).call(this.brushSetup.move, null);\r\n    }\r\n\r\n    private resizeChart () {\r\n        const parent = this.chartSVG.parentElement;\r\n        const cr = parent.getBoundingClientRect();\r\n        const width = cr.width;\r\n        const height = cr.height;\r\n        const innerWidth = width - this.props.margin.left - this.props.margin.right;\r\n        const innerHeight = height - this.props.margin.top - this.props.margin.bottom;\r\n        this.xScale.range([0, innerWidth]);\r\n        this.brushSetup = brushX()\r\n            .extent([\r\n                [0, 0],\r\n                [innerWidth, innerHeight],\r\n            ])\r\n            .handleSize(10)\r\n            .on('end', () => {\r\n                const selection = (event.selection || [0, innerWidth]) as [number, number];\r\n                const inverted = [this.xScale.invert(selection[0]), this.xScale.invert(selection[1])];\r\n                this.setState({extent: event.selection ? inverted : null});\r\n                this.props.onBrush(inverted);\r\n            });\r\n        const brushSelection = select(this.brush);\r\n        brushSelection.call(this.brushSetup);\r\n        const brushMove = (this.state.extent === null || this.state.extent === undefined) ?\r\n            null :\r\n            [this.xScale(this.state.extent[0]), this.xScale(this.state.extent[1])];\r\n        brushSelection.call(this.brushSetup.move, brushMove);\r\n        this.setState({innerWidth, innerHeight, height, width});\r\n    }\r\n}\r\n","import { h, Component } from 'preact';\r\nimport { Axis } from '../../Axis';\r\nimport { Margin, DataArray } from '../../types';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { extent } from 'd3-array';\r\nimport { select, event } from 'd3-selection';\r\nimport { brush } from 'd3-brush';\r\nimport { style } from 'typestyle';\r\n\r\nconst dot = style({\r\n    strokeWidth: '1px',\r\n});\r\n\r\ndeclare const ResizeObserver: any;\r\n\r\ninterface ScatterPlotProps {\r\n    name: string;\r\n    x: string;\r\n    y: string;\r\n    data: DataArray;\r\n    height?: number;\r\n    width?: number;\r\n    margin?: Margin;\r\n    radius?: number;\r\n    labels?: boolean;\r\n    dotFill?: string;\r\n    dotBorder?: string;\r\n}\r\n\r\ninterface ScatterPlotDefaultProps {\r\n    height: number;\r\n    width: number;\r\n    margin: Margin;\r\n    radius: number;\r\n    labels: boolean;\r\n    dotFill: string;\r\n    dotBorder: string;\r\n\r\n}\r\n\r\ninterface ScatterPlotState {\r\n    width: number;\r\n    innerWidth: number;\r\n    height: number;\r\n    innerHeight: number;\r\n    xDomain: [number, number];\r\n    yDomain: [number, number];\r\n}\r\n\r\nexport class ScatterPlot extends Component<ScatterPlotProps, ScatterPlotState> {\r\n\r\n    public static defaultProps: ScatterPlotDefaultProps = {\r\n        height: 500,\r\n        width: 500,\r\n        margin: {\r\n            top: 25,\r\n            right: 25,\r\n            bottom: 75,\r\n            left: 75,\r\n        },\r\n        radius: 5,\r\n        labels: false,\r\n        dotFill: 'steelblue',\r\n        dotBorder: 'whitesmoke',\r\n    };\r\n    private chartSVG: any;\r\n    private resizeOb: any;\r\n    private brush: SVGGElement;\r\n    private brushSetup: any;\r\n    private xScale: any;\r\n    private yScale: any;\r\n\r\n    constructor (props: ScatterPlotProps) {\r\n        super(props);\r\n        const innerWidth = props.width - props.margin.left - props.margin.right;\r\n        const innerHeight = props.height - props.margin.top - props.margin.bottom;\r\n        const xDomain = extent(props.data, (d) => d[props.x]);\r\n        const xDomainPadded = [xDomain[0] * 0.95, xDomain[1] * 1.05] as [number, number];\r\n        const yDomain = extent(props.data, (d) => d[props.y]);\r\n        const yDomainPadded = [yDomain[0] * 0.95, yDomain[1] * 1.05] as [number, number];\r\n\r\n        this.state = {\r\n            width: props.width,\r\n            height: props.height,\r\n            innerWidth,\r\n            innerHeight,\r\n            xDomain: xDomainPadded,\r\n            yDomain: yDomainPadded,\r\n        };\r\n    }\r\n\r\n    public render (props: ScatterPlotProps,\r\n                   {height, width, innerHeight, innerWidth, xDomain, yDomain}: ScatterPlotState) {\r\n\r\n        this.xScale = scaleLinear()\r\n            .range([0, innerWidth])\r\n            .domain(xDomain);\r\n\r\n        this.yScale = scaleLinear()\r\n            .range([innerHeight, 0])\r\n            .domain(yDomain);\r\n\r\n        return (\r\n            <svg ref={(svg) => this.chartSVG = svg} class={props.name} height={height} width={width}>\r\n                <g transform={`translate(${props.margin.left}, ${props.margin.top})`}>\r\n                    <clipPath id={`${props.name}_cp`}>\r\n                        <rect width={innerWidth} height={innerHeight} />\r\n                    </clipPath>\r\n                    <Axis height={innerHeight} axisType='x' scale={this.xScale} grid={true}/>\r\n                    <Axis width={innerWidth} axisType='y' scale={this.yScale} grid={true}/>\r\n                    {\r\n                        props.data.map((point, index) =>\r\n                            <circle class={dot} r={props.radius} cx={this.xScale(point[props.x])}\r\n                                cy={this.yScale(point[props.y])} key={index} clip-path={`url(#${props.name}_cp)`}\r\n                                fill={props.dotFill} stroke={props.dotBorder}/>,\r\n                        )\r\n                    }\r\n                    {\r\n                        props.labels &&\r\n                            <text x={innerWidth / 2} y={innerHeight + props.margin.bottom - 15}>\r\n                                {props.x.replace(/_/g, ' ')}\r\n                            </text>\r\n                    }\r\n                    {\r\n                        props.labels &&\r\n                            <text x={-innerHeight / 2} y={-props.margin.left + 15} transform='rotate(-90)'>\r\n                                {props.y.replace(/_/g, ' ')}\r\n                            </text>\r\n                    }\r\n                    <g ref={(brushRef) => this.brush = brushRef}></g>\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    public componentDidMount () {\r\n        this.resizeChart();\r\n        this.resizeOb = new ResizeObserver((entries: any[]) => {\r\n            for (const entry of entries) {\r\n                const cr = entry.contentRect;\r\n                const width = cr.width;\r\n                const height = cr.height;\r\n                if (width !== this.state.width || height !== this.state.height) {\r\n                    this.resizeChart();\r\n                }\r\n            }\r\n        });\r\n        this.resizeOb.observe(this.chartSVG.parentElement);\r\n    }\r\n\r\n    public componentWillReceiveProps (newProps: ScatterPlotProps, newState: ScatterPlotState) {\r\n        const xDomain = extent(newProps.data, (d) => d[newProps.x]);\r\n        const xDomainPadded = [xDomain[0] * 0.95, xDomain[1] * 1.05] as [number, number];\r\n        const yDomain = extent(newProps.data, (d) => d[newProps.y]);\r\n        const yDomainPadded = [yDomain[0] * 0.95, yDomain[1] * 1.05] as [number, number];\r\n        this.setState({yDomain: yDomainPadded, xDomain: xDomainPadded});\r\n    }\r\n\r\n    public componentWillUnmount () {\r\n        this.resizeOb.disconnect();\r\n    }\r\n\r\n    private resizeChart () {\r\n        const parent = this.chartSVG.parentElement;\r\n        const cr = parent.getBoundingClientRect();\r\n        const width = cr.width;\r\n        const height = cr.height;\r\n        const innerWidth = width - this.props.margin.left - this.props.margin.right;\r\n        const innerHeight = height - this.props.margin.top - this.props.margin.bottom;\r\n        this.brushSetup = brush()\r\n        .extent([\r\n            [0, 0],\r\n            [innerWidth, innerHeight],\r\n        ])\r\n        .handleSize(10)\r\n        .on('end', () => {\r\n            const s = event.selection;\r\n            if (s === null) {\r\n                const xDomain = extent(this.props.data, (d) => d[this.props.x]);\r\n                const xDomainPadded = [xDomain[0] * 0.95, xDomain[1] * 1.05] as [number, number];\r\n                const yDomain = extent(this.props.data, (d) => d[this.props.y]);\r\n                const yDomainPadded = [yDomain[0] * 0.95, yDomain[1] * 1.05] as [number, number];\r\n                this.setState({xDomain: xDomainPadded, yDomain: yDomainPadded});\r\n            } else {\r\n                const xDomain = [s[0][0], s[1][0]].map(this.xScale.invert, this.xScale) as [number, number];\r\n                const yDomain = [s[1][1], s[0][1]].map(this.yScale.invert, this.yScale) as [number, number];\r\n                select(this.brush).call(this.brushSetup.move, null);\r\n                this.setState({xDomain, yDomain});\r\n            }\r\n        });\r\n        select(this.brush).call(this.brushSetup);\r\n        this.setState({innerWidth, innerHeight, height, width});\r\n    }\r\n}\r\n","import { h, Component, ComponentChild, cloneElement, VNode } from 'preact';\r\nimport { scaleLinear, scaleTime } from 'd3-scale';\r\nimport { line } from 'd3-shape';\r\nimport { bisector, extent } from 'd3-array';\r\nimport { Margin, TimestampArray, TimestampData } from '../../types';\r\nimport { Axis } from '../../Axis';\r\nimport { Flag } from './Flag';\r\nimport { style } from 'typestyle';\r\n\r\nconst overlay = style({\r\n    fill: 'none',\r\n    pointerEvents: 'all',\r\n    borderTop: 'none',\r\n    borderStyle: 'none',\r\n});\r\n\r\nconst axisControl = style({\r\n    textAnchor: 'middle',\r\n    userSelect: 'none',\r\n    cursor: 'pointer',\r\n    $nest: {\r\n        '&>text': {\r\n            width: '12px',\r\n            fontSize: '1.2em',\r\n        },\r\n    },\r\n});\r\n\r\ndeclare const ResizeObserver: any;\r\n\r\ninterface TrendChartProps {\r\n    name: string;\r\n    height?: number;\r\n    width?: number;\r\n    margin?: Margin;\r\n    x: string;\r\n    y: string;\r\n    data: TimestampArray;\r\n    lineColour?: string;\r\n    extent?: Date[];\r\n    tooltip?: boolean;\r\n    axisControl?: boolean;\r\n    controlColour?: string;\r\n}\r\n\r\ninterface TrendChartDefaultProps {\r\n    height: number;\r\n    width: number;\r\n    margin: Margin;\r\n    lineColour: string;\r\n    extent: Date[];\r\n    tooltip: boolean;\r\n    axisControl: boolean;\r\n    controlColour: string;\r\n}\r\n\r\ninterface TrendChartState {\r\n    height: number;\r\n    width: number;\r\n    innerHeight: number;\r\n    innerWidth: number;\r\n    tooltipValues: [Date, number];\r\n    textAnchor: string;\r\n    isMouseOver: boolean;\r\n    yDomain: number[];\r\n}\r\n\r\nexport class TrendChart extends Component<TrendChartProps, TrendChartState> {\r\n\r\n    public static defaultProps: TrendChartDefaultProps = {\r\n        height: 200,\r\n        width: 1000,\r\n        margin: {\r\n            top: 25,\r\n            right: 25,\r\n            bottom: 75,\r\n            left: 75,\r\n        },\r\n        lineColour: 'lightblue',\r\n        extent: [],\r\n        tooltip: true,\r\n        axisControl: true,\r\n        controlColour: 'goldenrod',\r\n    };\r\n    private chartSVG: HTMLBaseElement;\r\n    private resizeOb: any;\r\n    private xScale: any;\r\n\r\n    constructor (props: TrendChartProps) {\r\n        super(props);\r\n        const innerWidth = props.width - props.margin.left - props.margin.right;\r\n        const innerHeight = props.height - props.margin.top - props.margin.bottom;\r\n        const yDomain = extent(props.data, (d) => +d[props.y]);\r\n        this.state = {\r\n            width: props.width,\r\n            height: props.height,\r\n            innerWidth,\r\n            innerHeight,\r\n            isMouseOver: false,\r\n            tooltipValues: [null, null],\r\n            textAnchor: 'middle',\r\n            yDomain,\r\n        };\r\n    }\r\n\r\n    public render (props: TrendChartProps,\r\n                   {innerWidth, innerHeight, height, width, isMouseOver, tooltipValues,\r\n                    textAnchor, yDomain}: TrendChartState) {\r\n        const children = this.props.children as ComponentChild[];\r\n\r\n        const xDomain = props.extent.length > 0 ?\r\n            props.extent :\r\n            extent(props.data, (d) => +d[props.x]);\r\n\r\n        this.xScale = scaleTime()\r\n            .range([0, innerWidth])\r\n            .domain(xDomain);\r\n\r\n        const yScale = scaleLinear()\r\n            .range([innerHeight, 0])\r\n            .domain(yDomain);\r\n\r\n        const lineFunc = line<TimestampData>()\r\n            .x((d) => this.xScale(d[props.x] as Date))\r\n            .y((d) => yScale(+d[props.y]));\r\n\r\n        return (\r\n            <svg ref={(svg) => this.chartSVG = svg} class={props.name} height={height} width={width}>\r\n                { props.axisControl &&\r\n                    <g class={axisControl} stroke={props.controlColour}\r\n                        transform={`translate(${props.margin.left * 0.3}, ${props.margin.top + 5})`}>\r\n                        <text onClick={() => this.handleChangeYDomain('topup')}>\r\n                            &#43;\r\n                        </text>\r\n                        <text transform='translate(0, 15)' onClick={() => this.handleChangeYDomain('topdown')}>\r\n                            &#45;\r\n                        </text>\r\n                    </g>\r\n                }\r\n                { props.axisControl &&\r\n                    <g class={axisControl} stroke={props.controlColour}\r\n                        transform={`translate(${props.margin.left * 0.3}, ${innerHeight})`}>\r\n                        <text onClick={() => this.handleChangeYDomain('botup')}>\r\n                            &#43;\r\n                        </text>\r\n                        <text transform='translate(0, 15)' onClick={() => this.handleChangeYDomain('botdown')}>\r\n                            &#45;\r\n                        </text>\r\n                    </g>\r\n                }\r\n                <g transform={`translate(${props.margin.left}, ${props.margin.top})`}>\r\n                    <clipPath id={`${props.name}_cp`}>\r\n                        <rect width={innerWidth} height={innerHeight} />\r\n                    </clipPath>\r\n                    <Axis height={innerHeight} axisType='x' scale={this.xScale}/>\r\n                    <Axis width={innerWidth} axisType='y' scale={yScale} grid={true}/>\r\n                    <path d={lineFunc(props.data)} clip-path={`url(#${props.name}_cp)`}\r\n                        stroke-linecap='round' stroke={props.lineColour} fill='none' stroke-width='2px'/>\r\n                    {\r\n                        children[0] &&\r\n                            children.map((ch) =>\r\n                                cloneElement(ch as VNode<Flag>,\r\n                                        {xScale: this.xScale, height: innerHeight, chartName: props.name}))\r\n                    }\r\n                    {\r\n                        (isMouseOver && tooltipValues[0] !== null) &&\r\n                            <g transform={`translate(${this.xScale(tooltipValues[0])},${yScale(tooltipValues[1])})`}>\r\n                                <circle fill='none' stroke-width={2} stroke='gold' r='6'></circle>\r\n                                <text x={0} y={-15} dy='0.5em' text-anchor={textAnchor}>\r\n                                {\r\n                                    `${tooltipValues[0].toLocaleDateString()} ${tooltipValues[0].toLocaleTimeString()}:\r\n                                        ${tooltipValues[1].toFixed(4)}`\r\n                                }\r\n                                </text>\r\n                            </g>\r\n                    }\r\n                    {\r\n                        (props.tooltip && props.data.length > 0) &&\r\n                            <rect class={overlay} width={innerWidth} height={innerHeight}\r\n                                onMouseMove={this.handleMouseMove} onMouseOver={this.handleMouseOver}\r\n                                onMouseOut={this.handleMouseOut}>\r\n                            </rect>\r\n                    }\r\n                    {\r\n                        children[0] &&\r\n                            children.map((ch) =>\r\n                                cloneElement(ch as VNode<Flag>,\r\n                                        {xScale: this.xScale, height: innerHeight, chartName: props.name}))\r\n                    }\r\n                </g>\r\n             </svg>\r\n        );\r\n    }\r\n\r\n    public componentDidMount () {\r\n        this.resizeChart();\r\n        this.resizeOb = new ResizeObserver((entries: any[]) => {\r\n            for (const entry of entries) {\r\n                const cr = entry.contentRect;\r\n                const width = cr.width;\r\n                const height = cr.height;\r\n                if (width !== this.state.width || height !== this.state.height) {\r\n                    this.resizeChart();\r\n                }\r\n            }\r\n        });\r\n        this.resizeOb.observe(this.chartSVG.parentElement);\r\n    }\r\n\r\n    public componentWillReceiveProps (newProps: TrendChartProps) {\r\n        const yDomain = extent(newProps.data, (d) => +d[newProps.y]);\r\n        this.setState({yDomain});\r\n    }\r\n\r\n    public componentWillUnmount () {\r\n        this.resizeOb.disconnect();\r\n    }\r\n\r\n    private handleChangeYDomain = (direction: string) => {\r\n        const yDomain = this.state.yDomain;\r\n        const yMax = yDomain[1];\r\n        switch (direction) {\r\n            case 'topup':\r\n                yDomain[1] *= 1.05;\r\n                break;\r\n            case 'topdown':\r\n                yDomain[1] *= 0.95;\r\n                break;\r\n            case 'botup':\r\n                yDomain[0] += yMax * 0.05;\r\n                break;\r\n            case 'botdown':\r\n                yDomain[0] -= yMax * 0.05;\r\n                break;\r\n        }\r\n        yDomain[0] = yDomain[0] < 0 ? 0 : yDomain[0];\r\n        this.setState({yDomain});\r\n    }\r\n\r\n    private handleMouseOver = () => {\r\n        this.setState({isMouseOver: true});\r\n    }\r\n\r\n    private handleMouseOut = () => {\r\n        this.setState({isMouseOver: false});\r\n    }\r\n\r\n    private handleMouseMove = (e: MouseEvent) => {\r\n        const xPoint = e.offsetX - this.props.margin.left;\r\n        const xValue = this.xScale.invert(xPoint);\r\n        const textAnchor = xPoint < (this.state.innerWidth * 0.1) ?\r\n            'start' :\r\n            xPoint < (this.state.innerWidth * 0.9) ?\r\n                'middle' :\r\n                'end';\r\n\r\n        const i = this.bisectDate(this.props.data, xValue, 1);\r\n        const d0 = this.props.data[i - 1];\r\n        const d1 = this.props.data[i];\r\n\r\n        const point = d1 === undefined ?\r\n            d0 :\r\n            +xValue - +d0.timestamp > +d1.timestamp - +xValue ?\r\n                d1 :\r\n                d0;\r\n\r\n        const tooltipValues = [point.timestamp, point[this.props.y]] as TrendChartState['tooltipValues'];\r\n        this.setState({tooltipValues, textAnchor});\r\n    }\r\n\r\n    private bisectDate = (data: TimestampArray, x: number, low: number) =>\r\n        bisector((d: TimestampData) => d[this.props.x]).left(data, x, low)\r\n\r\n    private resizeChart () {\r\n        const parent = this.chartSVG.parentElement;\r\n        const cr = parent.getBoundingClientRect();\r\n        const width = cr.width;\r\n        const height = cr.height;\r\n        const innerWidth = width - this.props.margin.left - this.props.margin.right;\r\n        const innerHeight = height - this.props.margin.top - this.props.margin.bottom;\r\n        this.setState({innerWidth, innerHeight, height, width});\r\n    }\r\n}\r\n","import { h, Component } from 'preact';\r\nimport { ScaleTime } from 'd3-scale';\r\nimport { EventsData } from '../../types';\r\nimport { style } from 'typestyle';\r\n\r\nconst flagStyle = style({\r\n    fill: 'gray',\r\n    strokeWidth: 1,\r\n    strokeOpacity: 0.9,\r\n    fillOpacity: 0.45,\r\n    stroke: 'lightgray',\r\n    $nest: {\r\n        '&:hover': {\r\n            fill: 'lightgray',\r\n        },\r\n    },\r\n});\r\n\r\nconst topperDefault = style({\r\n    fill: 'red',\r\n    fillOpacity: 1,\r\n});\r\n\r\nconst topperClicked = style({\r\n    fill: 'lawngreen',\r\n    fillOpacity: 1,\r\n});\r\n\r\ninterface FlagProps extends EventsData {\r\n    onClick: (flagID: number) => void;\r\n    xScale?: ScaleTime<number, number>;\r\n    height?: number;\r\n    chartName: string;\r\n    isClicked: boolean;\r\n}\r\n\r\nexport class Flag extends Component<FlagProps> {\r\n    public static defaultProps: FlagProps = {\r\n        onClick: () => {},\r\n        idx: 0,\r\n        event: 0,\r\n        start: '',\r\n        end: '',\r\n        type: '',\r\n        sub_type: '',\r\n        comment: null,\r\n        chartName: '',\r\n        isClicked: false,\r\n    };\r\n\r\n    constructor (props: FlagProps) {\r\n        super(props);\r\n    }\r\n    public render ({ xScale, height, start, end, chartName, isClicked }: FlagProps) {\r\n        return (\r\n            <g class={flagStyle} onClick={this.handleFlagClick} clip-path={`url(#${chartName}_cp)`}>\r\n                <path\r\n                    d={`M ${xScale(start as Date)} \\\r\n                        ${height} H ${xScale(end as Date)} V 20 H ${xScale(start as Date)} V ${height}`}>\r\n                </path>\r\n                <path class={isClicked ? topperClicked : topperDefault}\r\n                    d={`M ${xScale(end as Date)} \\\r\n                        20 L ${xScale(end as Date)} 0 L ${xScale(end as Date) - 15} 8 L \\\r\n                        ${xScale(end as Date)} 16 V 20`}>\r\n                </path>\r\n            </g>\r\n        );\r\n    }\r\n\r\n    private handleFlagClick = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick(this.props.event);\r\n    }\r\n}\r\n"],"names":["tickLabel","style","fontSize","cursor","userSelect","$nest","strokeWidth","strokeOpacity","shapeRendering","gridStyle","stroke","Axis","constructor","renderAxis","this","props","axisType","select","axis","call","axisBottom","scale","ticks","rotateScaleText","selectAll","attr","grid","tickSize","height","tickFormat","axisLeft","width","render","ref","translate","offsetX","shouldOffset","toLowerCase","undefined","h","class","transform","gridline","Component","pluck","array","key","map","el","pluckUnique","Set","DifferenceChart","y","x","data","entry","bandwidth","Math","min","value","name","abs","fill","title","toFixed","state","margin","top","bottom","right","left","ref$1","absoluteXValues","d","xMax","max","xDomain","yDomain","xScale","scaleLinear","range","innerWidth","domain","nice","yScale","scaleBand","rangeRound","innerHeight","paddingInner","svg","chartSVG","createBars","componentDidMount","resizeChart","resizeOb","ResizeObserver","entries","const","cr","contentRect","observe","parentElement","componentWillUnmount","disconnect","getBoundingClientRect","setState","colourArray","GroupedBar","x0","x1","groups","colourScale","group","yMax","groupMax","names","padding","scaleOrdinal","barName","idx","dy","legendReference","bar","fillOpacity","Histogram","valuesArray","xMin","bins","histogram","thresholds","length","barWidth","bin","barColour","barOutline","HorizontalBar","y0","y1","LineScatter","flatData","flat","extent","xDomainPadded","lineFunc","line","curve","curveNatural","id","dArray","groupIdx","point","index","r","radius","cx","cy","labels","replace","brushRef","brush","componentWillReceiveProps","newProps","newState","brushSetup","handleSize","on","s","event","selection","invert","move","RangeChart","brushClass","brushColour","scaleTime","timestamp","areaFunc","area","lineColour","fillColour","brushX","inverted","onBrush","brushSelection","brushMove","dot","ScatterPlot","dotFill","dotBorder","overlay","pointerEvents","borderTop","borderStyle","axisControl","textAnchor","TrendChart","direction","isMouseOver","e","xPoint","xValue","i","bisectDate","d0","d1","low","bisector","tooltipValues","children","controlColour","onClick","handleChangeYDomain","ch","cloneElement","chartName","toLocaleDateString","toLocaleTimeString","tooltip","onMouseMove","handleMouseMove","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","flagStyle","topperDefault","topperClicked","Flag","stopPropagation","handleFlagClick","start","end","isClicked","type","sub_type","comment"],"mappings":"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"}